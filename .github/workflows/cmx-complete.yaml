name: Compatibilty Test with CMX in complete mode

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version of the chart to test'
        required: true
        default: '0.2.0'

env:
  chart_name: mlflow
    
jobs:
  compatibility-matrix:
    strategy:
      fail-fast: false
      matrix:
        cluster: [ {distribution: kind, version: v1.25.3}, {distribution: k3s, version: v1.26} ]

    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Package Helm Chart for Replicated
        id: package-helm-chart
        run: |
          helm package applications/mlflow/charts/mlflow -u --version ${{ github.event.inputs.version }}

      - name: Create Release
        id: create-release
        uses: replicatedhq/replicated-actions/create-release@v1
        with:
          api-token: ${{ secrets.REPLICATED_API_TOKEN }}
          app-slug: ${{ secrets.REPLICATED_APP }}
          chart: ${{env.chart_name}}-${{ github.event.inputs.version }}.tgz

      - name: Create Customer
        id: create-customer
        uses: replicatedhq/replicated-actions/create-customer@v1
        with:
          api-token: ${{ secrets.REPLICATED_API_TOKEN }}
          app-slug: replicated-actions-ci # from the Replicated QA team
          customer-name: "${{env.chart_name}} CI Test Customer - ${{ github.ref_name }} - ${{ github.sha }}"
          customer-email: ${{ github.sha }}@example.com
          license-type: test
      
      - name: Create CMX Cluster
        id: create-cluster
        uses: replicatedhq/replicated-actions/create-cluster@v1
        with:
          api-token: ${{ secrets.REPLICATED_API_TOKEN }}
          kubernetes-distribution: ${{ matrix.cluster.distribution }}
          kubernetes-version: ${{ matrix.cluster.version }}
          timeout-minutes: 5
      
      - name: Setup kubeconfig
        run: |
          echo "${{ steps.create-cluster.outputs.cluster-kubeconfig }}" > /tmp/kubeconfig

      - name: Install Dependency Helm Charts
        id: install-dependency-charts
        run: |
          helm repo add cnpg https://cloudnative-pg.github.io/charts
          helm repo add minio-operator https://operator.min.io
          helm upgrade --install cnpg \
            --namespace cnpg-system \
            --create-namespace \
            cnpg/cloudnative-pg
          helm upgrade --install operator \
              --namespace minio-operator \
              --create-namespace \
              minio-operator/operator
        env:
          KUBECONFIG: /tmp/kubeconfig
          
      - name: Create Compatibility Testing
        id: helm-install-chart
        uses: replicatedhq/replicated-actions/helm-install@v1
        with:
          kubeconfig: ${{ steps.create-cluster.outputs.cluster-kubeconfig }}
          helm-path: helm
          registry-username: ${{ github.ref_name }}@example.com
          registry-password: ${{ steps.create-customer.outputs.license-id }}
          chart: oci://registry.replicated.com/${{ secrets.REPLICATED_APP }}/release__${{ steps.create-release.outputs.release-sequence }}/${{env.chart_name}}
          name: ${{env.chart_name}}
          namespace: test-${{env.chart_name}}
          run-preflights: false

      - name: Run Compatibility Testing
        run: |
          retries=10
          sleep_time=6
          for ((i=0; i<retries; i++)); do
            status=$(helm status ${{env.chart_name}} -n test-${{env.chart_name}} -o json | jq -r .info.status)
            if [[ "$status" == "deployed" ]]; then
              echo "Helm release ${{env.chart_name}} is successfully deployed."
              break
            else
              echo "Waiting for Helm release ${{env.chart_name}} to be deployed..."
              sleep $sleep_time
            fi

            if [[ $i -eq $((retries-1)) ]]; then
              echo "Helm release ${{env.chart_name}} failed to deploy after $((retries*sleep_time)) seconds."
              exit 1
            fi
          done
        env:
          KUBECONFIG: /tmp/kubeconfig

      - name: Cleanup kubeconfig
        run: rm /tmp/kubeconfig
      
      - name: remove cluster
        id: remove-cluster
        if: always()
        uses: replicatedhq/replicated-actions/remove-cluster@v1
        continue-on-error: true # It could be that the cluster is already removed
        with:
          api-token: ${{ secrets.REPLICATED_API_TOKEN }}
          cluster-id: ${{ steps.create-cluster.outputs.cluster-id }}
      